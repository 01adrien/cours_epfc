|------>
|------ EX 4 ->
|------>

Écrire une fonction qui calcule le nombre de plateaux de longueur supérieure
ou égale à 3.

curr    1 1 2 2 2 2 4 4 5 5 5 5 5 8 9 9 4 4 4 4 4 4   curr = it.next()
prev      1 1 2 2 2 2 4 4 5 5 5 5 5 8 9 9 4 4 4 4 4   prev = curr
res     0 0 0 0 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3   if (lgPlat==3)res++
lgPlat  1 2 1 2 3 4 1 2 1 2 3 4 5 1 1 2 1 2 3 4 5 6   if (curr==prev) lgPlat++ else lgPlat = 1

INIT:
res = 0;
curr = it.next;
prev = curr
lgPlat = 1


|------>
|------ EX 5 ->
|------>

Écrire une fonction qui calcule le nombre de plateaux de longueur supérieure ou égale à LG

lg = 2

curr    1 1 2 2 2 2 4 4 5 5 5 5 5 8 9 9 4 4 4 4 4 4   curr = it.next()
prev      1 1 2 2 2 2 4 4 5 5 5 5 5 8 9 9 4 4 4 4 4   prev = curr
res     0 1 1 2 2 2 2 3 3 4 4 4 4 4 4 5 4 6 6 6 6 6   if (lgPlat == lg)res++
lgPlat  1 2 1 2 3 4 1 2 1 2 3 4 5 1 1 2 1 2 3 4 5 6   if (curr == prev) lgPlat++ else lgPlat = 1

INIT:
res = 0;
curr = it.next;
prev = curr
lgPlat = 1


|------>
|------ EX 6 ->
|------>

Écrire une fonction qui calcule le nombre de plateaux de longueur 3.

curr    1 1 2 2 2 4 4 4 5 5 5 5 9 9 9 9 4 4 4 8 8 8   curr = it.next()
prev      1 1 2 2 2 4 4 4 5 5 5 5 9 9 9 9 4 4 4 8 8   prev = curr
res     0 0 0 0 1 1 1 2 2 2 3 2 2 2 3 2 2 2 3 3 3 4   if (lgPlat == 3) res++ else if (lgPlat == 4) res--
lgPlat  1 2 1 2 3 1 2 3 1 2 3 4 1 2 3 4 1 2 3 1 2 3   if (curr == prev) lgPlat++ else lgPlat = 1



|------>
|------ EX 7 ->
|------>

Écrire une fonction qui calcule le nombre de plateaux de longueur 1.

curr    1 2 2 2 2 2 3 4 5 5 2 1 9 9 7 9 4 4 4 8 8 7   curr = it.next()
prev      1 2 2 2 2 2 3 4 5 5 2 1 9 9 7 9 4 4 4 8 8   prev = curr
res     1 1 1 1 1 1 2 3 4 3 4 5 6 5 6 7 8 7 7 7 8 8   if (lgPlat == 1) res++ else if (lgPlat == 2) res--
lgPlat  1 1 2 3 4 5 1 1 1 2 1 1 1 2 1 1 1 2 3 4 1 1   if (curr == prev) lgPlat++ else lgPlat = 1

INIT:
res = 0;
curr = it.next;
prev = curr
lgPlat = res = 1

|------>
|------ EX 8 ->
|------>

// pareil que ex 6 

|------>
|------ EX 9 ->
|------>

Écrire une fonction qui calcule le nombre de plateaux de longueur comprise entre LG1 et LG2,
LG1 et LG2 inclus (données et on suppose LG1 > 0 et LG1 <= LG2).

lg1 = 2 | lg2 = 4

curr    1 1 2 3 2 2 4 1 5 5 5 5 5 8 9 9 4 4 4 4 4 4   curr = it.next()
prev      1 1 2 3 2 2 4 1 5 5 5 5 5 8 9 9 4 4 4 4 4   prev = curr
res     0 1 1 1 2 2 2 2 2 3 3 3 2 2 2 2 3 3 4 4 3 3   if ((lgPlat >= lg1 && lgPlat <= lg2) && !inc)res++ ; inc = true else if (lgPlat > lg2 && inc) res-- ; inc = false
lgPlat  1 2 1 1 1 2 1 1 1 2 3 4 5 1 1 2 1 2 3 4 5 6   if (curr == prev) lgPlat++ else lgPlat = 1; inc = false
inc     0 1 0 0 0 1 0 0 0 1 1 1 0 0 0 1 0 1 1 1 0 0

INIT:
res = 0;
curr = it.next;
prev = curr
lgPlat = 1
inc = false


|------>
|------ EX 10 ->
|------>

Écrire une fonction qui calcule le nombre de plateaux de hauteur maximale


curr    1 1 2 3 2 3 3 1 5 5 7 5 5 8 9 9 4 4 4 9 9 9   curr = it.next()
prev      1 1 2 3 2 3 3 1 5 5 7 5 5 8 9 9 4 4 4 9 9   prev = curr
res     1 1 1 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 2 2 2   if (curr != prev && curr == max) res ++     
max     1 1 2 3 3 3 3 3 5 5 7 7 7 8 9 9 9 9 9 9 9 9   if (curr > max) max = curr ; res = 1;


INIT:
res = 0;
curr = it.next;
max = curr
res = 1
prev = curr


|------>
|------ EX 11 ->
|------>

Écrire une fonction qui calcule le nombre de plateaux de hauteur maximale et de longueur
strictement supérieure à 1


curr    1 1 2 3 2 3 3 1 5 5 7 5 5 8 9 9 4 4 4 9 9 9   curr = it.next()
prev      1 1 2 3 2 3 3 1 5 5 7 5 5 8 9 9 4 4 4 9 9   prev = curr
res     0 1 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 1 1 2 2 2   if (curr == max && lgPlat == 2) res ++     
max     1 1 2 3 3 3 3 3 5 5 7 7 7 8 9 9 9 9 9 9 9 9   if (curr > max) max = curr ; res = 0;
lgPlat  1 2 1 1 1 1 2 1 1 2 1 1 2 1 1 2 1 2 3 1 2 3   if (curr == prev) lgPlat++ else lgPlat = 1

changer lgPlat au debut de l'iteration

INIT:
res = 0;
curr = it.next;
max = curr
res = 1
prev = curr


|------>
|------ EX 12 ->
|------>

Écrire une fonction qui calcule le nombre de plateaux de hauteur maximale et de longueur LG
(donnée et supposée strictement positive).

lg = 2

curr    1 1 1 3 2 3 3 3 5 5 7 3 3 8 9 9 4 4 4 9 9 9   curr = it.next()
prev      1 1 1 3 2 3 3 3 5 5 7 3 3 8 9 9 4 4 4 9 9   prev = curr
res     0 1 0 0 0 0 1 0 0 1 1 1 1 0 0 1 1 1 1 1 2 1   if (curr == max && lgPlat == lg) res ++     
max     1 1 1 3 2 3 3 3 5 5 7 3 3 8 9 9 4 4 4 9 9 9   if (curr > max) max = curr ; res = 0; if (lgPlat == 3) res--
lgPlat  1 2 3 1 1 1 2 3 1 2 1 1 2 1 1 2 1 2 3 1 2 3   if (curr == prev) lgPlat++ else lgPlat = 1


|------>
|------ EX 13 ->
|------>

Ecrire une fonction qui calcule la position du dernier plateau de hauteur maximale


curr     1  1  1  3  2  3  3  3  5  5  7  3  3  8  9  9  4  4  4  9  9  9   curr = it.next(); i++
prev        1  1  1  3  2  3  3  3  5  5  7  3  3  8  9  9  4  4  4  9  9   prev = curr
res      0  0  0  3  3  5  5  5  8  8  8  8  8  13 14 14 14 14 14 20 20 20  if (curr == max && prev != curr) res = i;
max      1  1  1  3  3  3  3  3  5  5  7  3  3  8  9  9  4  4  4  9  9  9   if (curr > max) max = curr ;
i        0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 17 18 19 20 21 22



|------>
|------ EX 14 ->
|------>

Ecrire une fonction qui calcule la longueur du dernier plateau de hauteur maximale.

curr     1  1  1  3  2  3  3  3  5  5  7  3  3  8  9  9  4  4  4  9  9  9   curr = it.next();
prev        1  1  1  3  2  3  3  3  5  5  7  3  3  8  9  9  4  4  4  9  9   prev = curr
res      1  2  3  1  1  1  2  2  1  2  1  1  1  1  1  2  2  2  2  1  2  3   if (curr == max) res = length;
max      1  1  1  3  3  3  3  3  5  5  7  3  3  8  9  9  4  4  4  9  9  9   if (curr > max) max = curr ; res ++;
length   1  2  3  1  1  1  2  3  1  2  1  1  2  1  1  2  1  2  3  1  2  3   if (curr == prev) length++ else length = 1

res = 0


|------>
|------ EX 15 ->
|------>

Ecrire une fonction qui calcule la position et la longueur du dernier plateau de hauteur maximale.

curr     1  1  1  3  2  3  3  3  5  5  7  3  3  8  9  9  4  4  4  9  9  9   curr = it.next(); i++
prev        1  1  1  3  2  3  3  3  5  5  7  3  3  8  9  9  4  4  4  9  9   prev = curr
pos      0  0  0  3  3  5  5  5  8  8  8  8  8  13 14 14 14 14 14 20 21 22  if (curr == max) if (prev != curr) pos = i else len = currLen
len      1  2  2  1  1  1  2  3  1  2  1  1  1  1  1  2  2  2  2  1  2  3   
max      1  1  1  3  3  3  3  3  5  5  7  3  3  8  9  9  4  4  4  9  9  9   if (curr > max) max = curr ; res ++;
currLen  1  2  3  1  1  1  2  3  1  2  1  1  2  1  1  2  1  2  3  1  2  3   if (curr == prev) currLen++ else currLen = 1
i        0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21   

res = 0


|------>
|------ EX 16 -> 
|------>

Ecrire une fonction qui calcule la position du dernier plateau de hauteur H (donnée)

h = 3

curr     1  1  1  3  2  3  3  3  5  5  7  3  3  8  9  9  4  4  4  9  9  9   curr = it.next(); i++
prev        1  1  1  3  2  3  3  3  5  5  7  3  3  8  9  9  4  4  4  9  9   prev = curr
pos      0  0  0  3  3  5  5  5  5  5  5  11 11 11 11 11 11 11 11 11 11 11  if (curr == h && prev != curr) pos = i
i        0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21   

res = 0


|------>
|------ EX 17 -> 
|------>


